// ==================================================
// Project Imports
// ==================================================

// App.jsx
import React, { useEffect, useRef, useState, useCallback, createContext, useContext } from 'react';
import ReactDOM from 'react-dom/client';
import * as THREE from 'three';

// ==================================================
// General Notes for Rosie AI
// ==================================================

// Note: In sandboxed environments, avoid using <form> elements and traditional
// form submissions as they may be blocked by security policies. Instead, use
// controlled components with direct event handlers (onClick, onChange, etc.).

// ==================================================
// ChatAIClass Definition
// ==================================================

// This module provides a class, ChatAIClass, which uses a ChatManager (provided externally) 
// to conduct a conversation with an AI. The AI's behavior is defined by a description string, 
// and the ChatAIClass offers a simple getResponse method to get AI responses.
// 
// This is AI is powered by Rosebud AI and is Rosebud's method to add in-game AI features.
//
// IMPORTANT NOTE:
// - Do not assume how ChatManager works beyond what is described here.
// - We only know that:
//   1. ChatManager is constructed by passing in a description string.
//   2. We can add messages by calling chatManager.addMessage('user', prompt).
//   3. We can get an AI-generated response by calling chatManager.getCharacterResponse('classify').
// - Any other assumptions about ChatManager internals or methods should not be made.
//
// This code can be used in any JS project by simply importing this class and using it.
//////////////////////////////////////////////////////////////

// Defines how the AI should behave. This should change to match the project. 
const AI_BEHAVIOR_DESCRIPTION = `
You are an advanced and knowledgeable AI system capable of assisting users with 
a wide range of topics. You should respond concisely and helpfully, ensuring that 
the information you provide is accurate, clear, and context-aware.
`;

/**
 * ChatAIClass:
 * 
 * This class is intended for non-technical users who want to interact with an AI system.
 * 
 * Usage:
 * 1. Create an instance of ChatAIClass:
 *    const chat = new ChatAIClass();
 * 
 * 2. Call getResponse(prompt) to get a response from the AI:
 *    const answer = await chat.getResponse("What is quantum computing?");
 *    console.log(answer);
 */

export class ChatAIClass {
    constructor() {
        // Directly create a new ChatManager instance with the AI behavior description.
        // We assume ChatManager is available globally or imported from elsewhere.
        this.chatManager = new ChatManager(AI_BEHAVIOR_DESCRIPTION);
    }

    /**
     * Generates a response from the AI based on the given prompt.
     *
     * @param {string} prompt - The user's input or question.
     * @returns {Promise<string>} - The AI's response as text.
     */
    async getResponse(prompt) {
        // Add the user's message to the conversation.
        this.chatManager.addMessage('user', prompt);

        // Ask the ChatManager for the AI's response and return it.
        const response = await this.chatManager.getCharacterResponse('classify');

        // Add the AI's message to the conversation so it has memory of it.
        this.chatManager.addMessage('assistant', response);

        return response;
    }
}

// ==================================================
// Main App Component with Three.js Scene
// ==================================================
// Auth Context
const AuthContext = createContext(null);
const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(() => {
    const savedUser = localStorage.getItem('user');
    return savedUser ? JSON.parse(savedUser) : null;
  });
  const login = (username, password) => {
    // In a real app, you would validate credentials with a backend
    if (username && password) {
      const userData = { username, id: Date.now() };
      setUser(userData);
      localStorage.setItem('user', JSON.stringify(userData));
      return true;
    }
    return false;
  };
  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
  };
  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};
const LoginModal = ({ onClose }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { login } = useContext(AuthContext);
  const handleSubmit = (e) => {
    e.preventDefault();
    if (login(username, password)) {
      onClose();
    } else {
      setError('Invalid credentials');
    }
  };
  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.7)',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      zIndex: 1000,
    }}>
      <div style={{
        backgroundColor: '#36393f',
        padding: '20px',
        borderRadius: '5px',
        width: '300px',
      }}>
        <h2 style={{ color: '#ffffff', marginBottom: '20px' }}>Login</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            placeholder="Username"
            style={{
              width: '100%',
              padding: '10px',
              marginBottom: '10px',
              backgroundColor: '#40444b',
              border: 'none',
              borderRadius: '4px',
              color: '#ffffff',
            }}
          />
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Password"
            style={{
              width: '100%',
              padding: '10px',
              marginBottom: '10px',
              backgroundColor: '#40444b',
              border: 'none',
              borderRadius: '4px',
              color: '#ffffff',
            }}
          />
          {error && <div style={{ color: '#ff0000', marginBottom: '10px' }}>{error}</div>}
          <button
            type="submit"
            style={{
              width: '100%',
              padding: '10px',
              backgroundColor: '#7289da',
              border: 'none',
              borderRadius: '4px',
              color: '#ffffff',
              cursor: 'pointer',
            }}
          >
            Login
          </button>
        </form>
      </div>
    </div>
  );
};
const App = () => {
  const { user, logout } = useContext(AuthContext);
  const [showLogin, setShowLogin] = useState(!user);
  const mountRef = useRef(null);
  const [currentRoom, setCurrentRoom] = useState('general');
  const [rooms, setRooms] = useState([
    { id: 'general', name: 'General' },
    { id: 'random', name: 'Random' },
    { id: 'help', name: 'Help' }
  ]);
  const [messages, setMessages] = useState({
    general: [],
    random: [],
    help: []
  });
  const [newMessage, setNewMessage] = useState('');
  useEffect(() => {
    // Scene setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    
    // Handle window resizing
    const handleResize = () => {
      const width = window.innerWidth;
      const height = window.innerHeight;
      const pixelRatio = window.devicePixelRatio;
      
      camera.aspect = width / height;
      camera.updateProjectionMatrix();
      
      renderer.setSize(width, height);
      renderer.setPixelRatio(pixelRatio);
      
      // Update camera position to maintain cube visibility
      camera.position.z = 5;
    };
    
    // Initial setup
    renderer.setPixelRatio(window.devicePixelRatio);
    mountRef.current.appendChild(renderer.domElement);
    handleResize(); // Call once to set initial dimensions
    window.addEventListener('resize', handleResize);
    
    // Create cube
    const geometry = new THREE.BoxGeometry(1, 1, 1);
    const material = new THREE.MeshBasicMaterial({ color: 0x00ffff, wireframe: true });
    const cube = new THREE.Mesh(geometry, material);
    scene.add(cube);
    
    camera.position.z = 5;
    
    // Animation
    const animate = () => {
      requestAnimationFrame(animate);
      
      cube.rotation.x += 0.01;
      cube.rotation.y += 0.01;
      
      renderer.render(scene, camera);
    };
    
    animate();
    
    // Cleanup
    return () => {
      window.removeEventListener('resize', handleResize);
      mountRef.current.removeChild(renderer.domElement);
      geometry.dispose();
      material.dispose();
      renderer.dispose();
    };
  }, []);
  return (
    <div style={{
      position: 'relative',
      width: '100vw',
      height: '100vh',
      backgroundColor: '#36393f',
      display: 'flex',
    }}>
      {/* Rooms Sidebar */}
      <div style={{
        width: '240px',
        backgroundColor: '#2f3136',
        padding: '20px',
        color: '#ffffff',
        overflowY: 'auto',
        display: 'flex',
        flexDirection: 'column',
      }}>
        {user && (
          <div style={{
            marginBottom: '20px',
            padding: '10px',
            backgroundColor: '#40444b',
            borderRadius: '4px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
          }}>
            <span>{user.username}</span>
            <button
              onClick={logout}
              style={{
                backgroundColor: '#7289da',
                border: 'none',
                borderRadius: '4px',
                padding: '5px 10px',
                color: '#ffffff',
                cursor: 'pointer',
              }}
            >
              Logout
            </button>
          </div>
        )}
        <h2 style={{ marginBottom: '20px', color: '#ffffff' }}>Channels</h2>
        {rooms.map(room => (
          <div
            key={room.id}
            onClick={() => setCurrentRoom(room.id)}
            style={{
              padding: '8px',
              marginBottom: '8px',
              cursor: 'pointer',
              backgroundColor: currentRoom === room.id ? '#42464D' : 'transparent',
              borderRadius: '4px',
            }}
          >
            # {room.name}
          </div>
        ))}
      </div>
      
      {/* Main Chat Area */}
      <div style={{
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        height: '100%',
        backgroundColor: '#36393f',
        position: 'relative',
      }}>
        {/* Chat Messages */}
        <div style={{
          flex: 1,
          padding: '20px',
          overflowY: 'auto',
          color: '#ffffff',
        }}>
          {messages[currentRoom].map((msg, index) => (
            <div key={index} style={{
              marginBottom: '16px',
              backgroundColor: '#40444b',
              padding: '12px',
              borderRadius: '4px',
            }}>
              <div style={{ fontWeight: 'bold', marginBottom: '4px' }}>
                {msg.user}
              </div>
              {msg.content}
            </div>
          ))}
        </div>
        
        {/* Message Input */}
        <div style={{
          padding: '20px',
          backgroundColor: '#40444b',
        }}>
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={(e) => {
              if (e.key === 'Enter' && newMessage.trim()) {
                setMessages(prev => ({
                  ...prev,
                  [currentRoom]: [...prev[currentRoom], {
                    user: 'User',
                    content: newMessage.trim()
                  }]
                }));
                setNewMessage('');
              }
            }}
            style={{
              width: '100%',
              padding: '12px',
              backgroundColor: '#40444b',
              border: 'none',
              borderRadius: '4px',
              color: '#ffffff',
              fontSize: '16px',
            }}
            placeholder={`Message #${currentRoom}`}
          />
        </div>
      </div>
      
      {/* Three.js Background */}
      <div ref={mountRef} style={{
        position: 'absolute',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        zIndex: -1,
        opacity: 0.1,
      }} />
    </div>
  );
};
const container = document.getElementById('renderDiv');
const root = ReactDOM.createRoot(container);
root.render(
  <AuthProvider>
    <App />
  </AuthProvider>
);
